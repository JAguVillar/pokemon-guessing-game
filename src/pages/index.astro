---
import { getParsedType } from "astro/zod";
import Layout from "../layouts/Layout.astro";
import Main from "../components/Main.vue";

const response = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151");
const data = await response.json();
let pokemons = [];

const promises = data.results.map((element) =>
  getType(element.url, element.name)
);

const resolvedPkmns = await Promise.all(promises);

pokemons = resolvedPkmns.flat();

// Create a Set to store unique type combinations
const uniqueTypeCombinations = new Set();

// Iterate through the Pokémon array
pokemons.forEach((pokemon) => {
  // Generate a key based on the types of the current Pokémon
  const typeKey = pokemon.types
    .map((type) => type.name)
    .sort()
    .join("-");

  // Add the type combination to the Set
  uniqueTypeCombinations.add(typeKey);
});

// Convert the Set back to an array and split the types for each combination
const uniqueTypesArray = Array.from(uniqueTypeCombinations).map(
  (typeCombination) => typeCombination.split("-")
);

let randomType =
  uniqueTypesArray[Math.floor(Math.random() * uniqueTypesArray.length)];

// Now, uniqueTypesArray contains arrays of unique type combinations without Pokémon names

// const chosenTypes = ["fire", "psychic"];

// const randomPokemon = pokemons[3];

// const hasChosenTypes = doesPokemonHaveType(randomPokemon, chosenTypes);

// if (hasChosenTypes) {
//   console.log(
//     `${randomPokemon.name} has the chosen types: ${chosenTypes.join(", ")}`
//   );
// } else {
//   console.log(
//     `${randomPokemon.name} does not have the chosen types: ${chosenTypes.join(
//       ", "
//     )}`
//   );
// }

// // Function to check if a Pokémon has the specified type or types
// function doesPokemonHaveType(pokemon, chosenTypes) {
//   // Check if any of the chosen types match the Pokémon's types
//   return chosenTypes.every((chosenType) =>
//     pokemon.types.some((pokemonType) => pokemonType.name === chosenType)
//   );
// }

async function getType(url, name) {
  const response = await fetch(url).then((response) => response.json());
  const data = response;
  console.log(data);

  let pokemons = [];
  let tipos = [];
  let img = null;
  let img_shiny = null;
  const randomNumber = Math.floor(Math.random() * 36) + 1 == 18 ? true : false;
  console.log(randomNumber);

  img = data.sprites.front_default;
  img_shiny = data.sprites.front_shiny;

  if (img != null) {
    data.types.forEach((type) => {
      tipos.push({
        name: type.type.name,
      });
    });

    pokemons.push({
      name: name,
      types: tipos,
      sprite: img_shiny != null && randomNumber == true ? img_shiny : img,
    });
  }
  return pokemons;
}
---

<Layout title="Welcome to Astro.">
  <main class="flex justify-center">
    <!-- <Select client:load initialPokemonData={pokemons} /> -->
    <Main client:load fetchedData={pokemons} uniqueTypes={randomType} />
  </main>
</Layout>

<style>
  main {
    /* margin: auto;
    padding: 1rem;
    width: 800px;
    max-width: calc(100% - 2rem); */

    font-size: 20px;
    /* line-height: 1.6; */
  }
</style>
